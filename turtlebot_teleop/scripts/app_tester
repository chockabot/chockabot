#! /usr/bin/env python

import roslib; roslib.load_manifest('turtlebot_teleop')
import rospy

# Brings in the SimpleActionClient
import actionlib

# Brings in the messages used by the web_app action, including the
# goal message and the result message.
import turtlebot_teleop.msg

def web_app_client():
    # Creates the SimpleActionClient, passing the type of the action
    # (web_appAction) to the constructor.
    client = actionlib.SimpleActionClient('app', turtlebot_teleop.msg.UserCompleteAction)

    # Waits until the action server has started up and started
    # listening for goals.
    client.wait_for_server()

    # Creates a goal to send to the action server.
    goal = turtlebot_teleop.msg.UserCompleteGoal(job='test')

    # Sends the goal to the action server.
    client.send_goal(goal)

    # Waits for the server to finish performing the action.
    client.wait_for_result()

    # Prints out the result of executing the action
    return client.get_result()  # A web_app Result

if __name__ == '__main__':
    try:
        # Initializes a rospy node so that the SimpleActionClient can
        # publish and subscribe over ROS.
        rospy.init_node('web_app_client_py')
        result = web_app_client()
        print "Result:", result.suceeded
    except rospy.ROSInterruptException:
        print "program interrupted before completion"