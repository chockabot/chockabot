#! /usr/bin/env python

import roslib
roslib.load_manifest('turtlebot_teleop')
roslib.load_manifest('actionlib_tutorials')

import rospy

import actionlib

import turtlebot_teleop.msg

request_statuses = {'hi' : (1, 2, 3, False)}

class UserCompleteAction(object):
    # create messages that are used to publish feedback/result
    _feedback = turtlebot_teleop.msg.UserCompleteFeedback()
    _result   = turtlebot_teleop.msg.UserCompleteResult()

    def __init__(self, name):
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name, turtlebot_teleop.msg.UserCompleteAction, execute_cb=self.execute_cb, auto_start = False)
        self._as.start()
        
    def execute_cb(self, goal):
        global request_statuses
        # helper variables
        r = rospy.Rate(1) # helps sleep at a set rate
        success = False
        
        #set initial cycle count
        self._feedback.count = 0
        
        #publish info to the console for the user
        rospy.loginfo('%s: Executing, ending of a user request %s' % (self._action_name, goal.job))
        
        # Set completed to true
        item, location, queue_num, completed = request_statuses[goal.job]
        request_statuses[goal.job] = (item, location, queue_num, True)
        
        # --------------- DEBUG CODE -------------------
        item, location, queue_num, completed = request_statuses[self._action_name]
        request_statuses[self._action_name] = (item, location, queue_num, True)
        
        
        
        for i in range(20):
            # Job deleted so we can break
            # User clicked done
            # if goal.job not in request_statuses:
            if self._action_name not in request_statuses:
                success = True
                break
            
            # Completed cycle unsucessfully
            self._feedback.count += 1
            self._as.publish_feedback(self._feedback)
            r.sleep() # Sleep 1 second before checking again
            
            
        
        
        self._result.suceeded = 1 if success else 0
        if success:
            rospy.loginfo('%s: Succeeded' % self._action_name)
            print "User Clicked action completion"
        else:
            print "User did not complete action"
            del request_statuses[self._action_name]
    
            S     global queued_requests
            queued_requests -= 1
            
            for key in request_statuses:
                req_item, req_loc, req_num, req_complete = request_statuses[key]
                request_statuses[key] = (req_item, req_loc, req_num-1, req_complete)
        self._as.set_succeeded(self._result)
      
if __name__ == '__main__':
  rospy.init_node('completed_action')
  UserCompleteAction(rospy.get_name())
  rospy.spin()