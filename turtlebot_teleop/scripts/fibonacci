#! /usr/bin/env python

import roslib
roslib.load_manifest('actionlib_tutorials')
roslib.load_manifest('turtlebot_teleop')

import rospy

import actionlib

import actionlib_tutorials.msg
import turtlebot_teleop.msg

request_statuses = {'hi' : (1, 2, 3, False)}

class FibonacciAction(object):
  # create messages that are used to publish feedback/result
  _feedback = turtlebot_teleop.msg.UserCompleteFeedback()
  _result   = turtlebot_teleop.msg.UserCompleteResult()

  def __init__(self, name):
    self._action_name = name    
    self._as = actionlib.SimpleActionServer(self._action_name, turtlebot_teleop.msg.UserCompleteAction, execute_cb=self.execute_cb, auto_start = False)
    self._as.start()
    
  def execute_cb(self, goal):
    # helper variables
    r = rospy.Rate(1)
    success = True
    
    global request_statuses
    request_statuses['test'] = goal
    
    self._feedback.count = 0
    for i in range(10):
        if self._as.is_preempt_requested():
            rospy.loginfo('%s: Preempted' % self._action_name)
            self._as.set_preempted()
            success = False
            break        
        self._feedback.count += 1
        self._as.publish_feedback(self._feedback)
        r.sleep()
        
    self._result.suceeded = 1 if success else 0
    self._as.set_succeeded(self._result)

      
if __name__ == '__main__':
  rospy.init_node('web_app_fib')
  FibonacciAction(rospy.get_name())
  rospy.spin()