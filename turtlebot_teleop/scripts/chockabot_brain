#!/usr/bin/env python

import rospy
import actionlib
import easygui
import json


import turtlebot_teleop.msg
from std_msgs.msg import String
from geometry_msgs.msg import Point, PoseStamped, Pose, Quaternion
from move_base_msgs.msg import MoveBaseActionGoal, MoveBaseActionFeedback, MoveBaseActionResult, MoveBaseAction, MoveBaseGoal, MoveBaseResult
from turtlebot_teleop.srv import GetBin, GetBinRequest, GetBinResponse

import sys, select, termios, tty, Queue

import easygui

# Constants representing goal sucess
ACTION_ACTIVE = 1
ACTION_ABORTED = 4
ACTION_SUCCEEDED = 3

class ChockabotBrain():
    ORIGINAL_LOC = '..'
    ITEMS_FILE = 'items.itm' # Files located at homes/cse
    DEST_FILE = 'dest.itm'
    FEDUCIAL_FILE = 'fed_file.txt'
    HOMING_PERIOD = 120

    def __init__(self, default_files=True):
        rospy.init_node('chockabot_brain')
        
        self.move_client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        print 'waiting for moving server... if it doesn"t show, run `roslaunch turtlebot_navigation 3d_amcl.launch map_file:=<FILE_LOC>` on the robot.'
        self.move_client.wait_for_server()
        print 'Connected move client'
        
        self.complete_action = actionlib.SimpleActionClient('app', turtlebot_teleop.msg.UserCompleteAction)
        print 'waiting for server... if it doesn"t show, run `roslaunch turtlebot_teleop app.launch` on this terminal.'
        self.complete_action.wait_for_server()
        print 'Connected with app'

        self.cancel_list = []    
        
        file_folder = self.ORIGINAL_LOC 
        if not default_files:
            file_folder = easygui.diropenbox(msg="Enter folder where files are located")
       
        self.item_loc = self.load_locs(file_folder + '/' + self.ITEMS_FILE)
        self.dest_loc = self.load_locs(file_folder + '/' + self.DEST_FILE)
        self.item_feducial = self.load_feds(file_folder + '/' + self.FEDUCIAL_FILE)

        self.home_timer = None

        self.job_sub = rospy.Subscriber('item_requests', String, self.job_callback)
        self.cancel_sub = rospy.Subscriber('cancel_requests', String, self.cancel_callback)

        print 'items', self.item_loc
        print 'dests', self.dest_loc
        
        rospy.spin()

    # callback to handle added canceled jobs
    def cancel_callback(self, feedback):
        self.cancel_list.append(feedback.data)    

    # callback to handle if it runs into an object.
    def job_callback(self, feedback):
        data = feedback.data
        rospy.loginfo(rospy.get_caller_id() + ' I heard a request for job=%s', data)

        try:
            # Extract request from received data
            name, item, destination = data.split('\t')
            
            # Verify the item and location exist
            dest_found = destination in self.dest_loc
            item_found = item in self.item_loc
            
            if dest_found and item_found:                               
                # If the job has not been requested to be cancelled then execute it
                if not self.check_cancellation(name):
                    if self.home_timer:
                        self.home_timer.cancel()
                    self.execute_job(name, item, destination)
                    
                    # Create a new timer
                    self.home_timer = self.create_home_timer()
            else:
                # Print an error if the item or location is not found
                not_found = 'Item' if not item_found else 'Location'
                not_found += ' and Location' if not dest_found and not item_found else ''
                rospy.logerr(rospy.get_caller_id() + ' %s not found.' , not_found)
        
        # Log an error if we have a problem reading the job from the subscription
        except Exception as e:
            rospy.loginfo(rospy.get_caller_id() + ' Unable to Read: job request not in correct format %s', e)
            
    # job execution method
    def execute_job(self, name, item, destination):
        # STEP 0: Check for validity
        if destination not in self.dest_loc or item not in self.item_loc:
            rospy.loginfo(rospy.get_caller_id() + ' did not finish job for %s: WAS NOT VALID', name)
            return
    
        # STEP 1: Go to the item location
        if not self.travel_to_loc(self.item_loc[item]):
            rospy.logerr('Couldn\'t go to item location.')
            self.send_failure(name)
            return
            
        # Cancellation Check: Pre-item grab (at starting location)
        if self.check_cancellation(name):
            return
        
        # STEP 2: Align with Fiducial + Get Object
        fed = 0 if item not in self.item_feducial else self.item_feducial[item]
        if not self.get_bin_helper(fed):
            # Try again once more
            self.travel_to_loc(self.item_loc[item])
            
            # Cancellation Check: Pre-item grab (at item location)
            if self.check_cancellation(name):
                return
            # Try to get the item (if not cancelled)
            if not self.get_bin_helper(fed):
                rospy.logerr('Couldn\'t return extract bin.')
                self.send_failure(name)
                return
                
        # Cancellation Check: has item (at item loc)
        if self.check_cancellation(name):
            return_item(self, name, item)
            return        
            
        # STEP 3: Go to destination location        
        if not self.travel_to_loc(self.dest_loc[destination]):
            rospy.logerr('Couldn\'t go to destination location.')
            self.send_failure(name)
            return
          
        # Cancellation Check: has item (at destination)
        if self.check_cancellation(name):
            return_item(self, name, item)
            return  
        
        # STEP 4: Send JobCompletionNotification Action (wait for completion)
        self.send_completion(name)
        if self.complete_action.get_result():
            rospy.loginfo(rospy.get_caller_id() + ' finished job for %s', name)
        else:
            rospy.loginfo(rospy.get_caller_id() + ' did not finish job for %s', name)      

        # STEP 5&6: Return item
        self.return_item(name, item)


    def return_item(self, name, item):
        # STEP 5: Return to Shelf Location
        if not self.travel_to_loc(self.item_loc[item]):
            rospy.logerr('Couldn\'t return to bin location to return bin.')
            return
        
        # STEP 6: Place Bin on Shelf
        if not self.return_bin_helper(fed):
            # Try again once more
            self.travel_to_loc(self.item_loc[item])
            if not self.get_bin_helper(fed):
                rospy.logerr('Couldn\'t return the bin to the shelf.')
                return
    
    
    def check_cancellation(self, name):
        if name in self.cancel_list:
            self.cancel_list.remove(name)
            rospy.loginfo(rospy.get_caller_id() + 'Job for %s was cancelled.', name)
            return True
        return False
    
    def send_failure(self, name):
        failure = 'FAILED: %s' % name
        self.send_completion(failure)
    
    def send_completion(self, name):
        self.complete_action.wait_for_server()
        goal = turtlebot_teleop.msg.UserCompleteGoal(job=name)
        self.complete_action.send_goal(goal)
        self.complete_action.wait_for_result()        
                
    def travel_to_loc(self, pose_stamped):
        goal = MoveBaseGoal()
        goal.target_pose = pose_stamped
        goal.target_pose.header.frame_id = 'map'
        print 'sending goal: ' + str(pose_stamped)
        self.move_client.send_goal(goal)
        self.move_client.wait_for_result()
        res = self.move_client.get_result()
        
        if res != ACTION_ABORTED:
            print 'succeeded in traveling to get item! %s' % res 
        else:
            print 'failed in traveling to get item: %s' % res
        return  res
        
    def get_bin_helper(self, fiducial):
        rospy.wait_for_service('get_bin')
        try:
            rospy.loginfo('requesting fiducial ' + str(fiducial) + '...')
            get_bin = rospy.ServiceProxy('get_bin', GetBin)
            res = get_bin(fiducial)
            rospy.loginfo('result: ' + str(res.result))
            return True
            
        except rospy.ServiceException, e:
            rospy.logerr( "Service call failed: %s" % e)
            return False
            
    def return_bin_helper(self, fiducial):
        rospy.wait_for_service('set_bin')
        try:
            rospy.loginfo('requesting fiducial ' + str(fiducial) + '...')
            set_bin = rospy.ServiceProxy('set_bin', GetBin)
            res = set_bin(fiducial)
            rospy.loginfo('result: ' + str(res.result))
            return True
            
        except rospy.ServiceException, e:
            rospy.logerr("Service call failed: %s" % e)
            return False

    def create_home_timer(self):
        if self.home_timer:
            self.home_timer.cancel()

        # Create a new timer
        home_timer = rospy.Timer(rospy.Duration(self.HOMING_PERIOD), self.go_home_youre_drunk, True)
        
    def go_home_youre_drunk(self, feedback):
        rospy.logerr(rospy.get_caller_id() + ' timed out and headed home')
        home_goal = MoveBaseGoal()
        
        if 'home' not in self.dest_loc:
            rospy.logerr(rospy.get_caller_id() + ' forgot where home was. Awww :((')
        
        if self.dest_loc['home']:   
            home_goal.target_pose = self.dest_loc['home']
            
        home_goal.target_pose.header.frame_id = 'map'
        self.move_client.send_goal(home_goal)
        self.move_client.wait_for_result()
        
        # Checks the status of the goal. 
        if (self.move_client.get_state() == ACTION_SUCCEEDED):
            # Robot made it home safe and sound, fingers crossed no hangover
            rospy.logerr(rospy.get_caller_id() + ' is home')
        else:
            # Robot was too drunk to make it home
            rospy.logerr(rospy.get_caller_id() + ' did not make it home #drunk')
        
        
    def load_locs(self, file_name):
        loaded_locs = {}
        try:
            f = open(file_name, 'r')
            new_locs = json.loads( f.read() )
            f.close()
            
            for data_name in new_locs.keys():
                pose_data = new_locs[data_name]
                
                loc_pose = Pose()
                loc_pose.position = Point(pose_data[0][0], pose_data[0][1], 0)
                
                loc_pose.orientation.z = 0
                loc_pose.orientation.w = 1
                if len(pose_data) > 1:
                    loc_pose.orientation.z = pose_data[1][0]
                    loc_pose.orientation.w = pose_data[1][1]
                    
                    
                loc_pose_stamped = PoseStamped()
                loc_pose_stamped.pose = loc_pose
                loaded_locs[data_name] = loc_pose_stamped
        except Exception as e:
            rospy.loginfo('Could not load from file %s: %s' % (file_name, e))        
        return loaded_locs
        
    def load_feds(self, file_name):
        item_to_feds = {}
        try:
            f = open(file_name, 'r')
            item_to_feds = json.loads( f.read() )
            f.close()
        except Exception as e:
            rospy.loginfo('Could not load from file %s: %s' % (file_name, e))
        return item_to_feds
        

if __name__=="__main__":
    ChockabotBrain(False)
    
    
    