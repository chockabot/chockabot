#!/usr/bin/env python

# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy

import copy
import easygui
import json

from visualization_msgs.msg import *
from geometry_msgs.msg import Point, PoseStamped, Pose, Quaternion

from random import random
from math import sin

FIDUCIAL_COUNT = 2
fiducial_pairs = []

def callback ( data ):
    id = data.id
    pose = data.pose
    
    fid_id = int(id / 2)
    fiducial_pairs[fid_id].receive_marker(id, pose)
    
    
class fid_align:
    def __init__(self, id_1, id_2):
        self.timer = None
        self.id_1 = id_1
        self.id_2 = id_2
        self.pose_1 = None
        self.pose_2 = None
        
    def _create_timer():
        if self.timer:
            self.timer.cancel()
        self.timer = rospy.Timer(WAIT_TIME, self.clear_poses)
        self.timer.start()
        
    def clear_poses():
        self.pose_1 = None
        self.pose_2 = None
        
    def receive_marker(id, pose):
        if id == self.id_1:
            if self.id_2 == None:
                self.pose_1 = pose
                self.timer = self._create_timer()
            else:
                self.timer.cancel()                
                # Publish the location here
                self.clear_poses()
                
        elif id == self.id_2:
            if self.id_1 == None:
                self.pose_2 = pose
                self.timer = self._create_timer()
            else:
                self.timer.cancel()
                #PUBLISH the location here
                self.clear_poses()
        else:
            rospy.loginfo("Id not a correct match %s (expected %s or %s)" % (id, self.id_1, self.id_2))
                
    
if __name__=="__main__":
    global fiducial_pairs
    rospy.init_node("fiducial")
    
    # FIX
    # rospy.Subscriber('visualization_msgs/Marker', Marker, callback)
   
    for i in range(0, FIDUCIAL_COUNT, 2):
        fiducial_pairs.add(fid_align(i, i + 1))
    
    #pub = rospy.Publisher("move_base_simple/goal", PoseStamped, queue_size=10)


    rospy.spin()